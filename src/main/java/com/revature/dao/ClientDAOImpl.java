package com.revature.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.revature.dto.AddOrEditClientDTO;
import com.revature.model.Client;
import com.revature.util.ConnectionUtility;

public class ClientDAOImpl implements ClientDAO {

	@Override
	public List<Client> getAllClients() throws SQLException {
		List<Client> clients = new ArrayList<>();

		try (Connection con = ConnectionUtility.getConnection()) {
			Statement stmt = con.createStatement();
			String sql = "SELECT * FROM training.client";
			ResultSet rs = stmt.executeQuery(sql);

			while (rs.next()) {
				int id = rs.getInt("client_id");
				String firstName = rs.getString("first_name");
				String lastName = rs.getString("last_name");
				String city = rs.getString("city");
				String state = rs.getString("state");
				String zipCode = rs.getString("zip_code");
				String phoneNumber = rs.getString("phone_number");

				Client client = new Client(id, firstName, lastName, city, state, zipCode, phoneNumber);

				clients.add(client);
			}

		}
		return clients;
	}

	@Override
	public Client addClient(AddOrEditClientDTO client) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "INSERT INTO training.client (first_name, last_name, city, state, zip_code, phone_number) VALUES (?, ?, ?, ?, ?, ?)";
			PreparedStatement pstmt = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

			pstmt.setString(1, client.getFirstName());
			pstmt.setString(2, client.getLastName());
			pstmt.setString(3, client.getCity());
			pstmt.setString(4, client.getState());
			pstmt.setString(5, client.getZipCode());
			pstmt.setString(6, client.getPhoneNumber());

			int recordsUpdated = pstmt.executeUpdate();

			if (recordsUpdated != 1) {
				throw new SQLException("Unable to create a client record");
			}

			ResultSet generatedKeys = pstmt.getGeneratedKeys();
			if (generatedKeys.next()) {
				Client createdClient = new Client(generatedKeys.getInt(1), client.getFirstName(), client.getLastName(),
						client.getCity(), client.getState(), client.getZipCode(), client.getPhoneNumber());
				return createdClient;
			} else {
				throw new SQLException("Autogenerated client ID could not be obtained.");
			}
		}
	}

	@Override
	public Client getClientById(int id) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "SELECT * FROM training.client WHERE client_id = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);

			pstmt.setInt(1, id);

			ResultSet rs = pstmt.executeQuery();

			if (rs.next()) {
				int client_id = rs.getInt("client_id");
				String first_name = rs.getString("first_name");
				String last_name = rs.getString("last_name");
				String city = rs.getString("city");
				String state = rs.getString("state");
				String zip_code = rs.getString("zip_code");
				String phone_number = rs.getString("phone_number");

				Client client = new Client(client_id, first_name, last_name, city, state, zip_code, phone_number);

				return client;
			} else {
				return null;
			}
		}
	}

	@Override
	public Client editClient(int clientId, AddOrEditClientDTO client) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "UPDATE training.client SET first_name = ?, last_name = ?, city = ?, state = ?, zip_code = ?, phone_number = ? WHERE client_id = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);
			
			pstmt.setString(1,  client.getFirstName());
			pstmt.setString(2, client.getLastName());
			pstmt.setString(3, client.getCity());
			pstmt.setString(4, client.getState());
			pstmt.setString(5, client.getZipCode());
			pstmt.setString(6, client.getPhoneNumber());
			pstmt.setInt(7, clientId);
			
			int recordsUpdated = pstmt.executeUpdate();
			
			if (recordsUpdated != 1) {
				throw new SQLException("Record was not able to be updated");
			}
			return new Client(clientId, client.getFirstName(), client.getLastName(), client.getCity(), client.getState(), client.getZipCode(), client.getPhoneNumber() );
		}
	}

	@Override
	public void deleteClient(int clientId) throws SQLException {
		
		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "DELETE FROM training.client WHERE client_id = ?";
			String sql2 = "DELETE FROM training.account WHERE client_id = ?";
			// When deleting a client, we also need to delete accounts associated with that client. 
			// This ensures that we do not have orphan accounts listed in our DB. 
			
			PreparedStatement pstmt = con.prepareStatement(sql);
			PreparedStatement pstmt2 = con.prepareStatement(sql2);
			
			pstmt.setInt(1, clientId);
			pstmt2.setInt(1, clientId);
			
			pstmt2.executeUpdate();
			
			int recordsDeleted = pstmt.executeUpdate();
			
		if (recordsDeleted != 1) {
			throw new SQLException("Unable to delete record");
		}	
		}
	}

}
