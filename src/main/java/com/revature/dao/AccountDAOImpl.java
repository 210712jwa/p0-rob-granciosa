package com.revature.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.revature.dto.AddOrEditAccountDTO;
import com.revature.model.Account;
import com.revature.util.ConnectionUtility;

public class AccountDAOImpl implements AccountDAO {

	// You want to be able to retrieve information about an account by entering in
	// the account number.
	// if you create a accountDao object, the information of the account (balance,
	// clientID for account, etc)
	// will be available to you.

	@Override
	public Account getAccountByAccountNo(int acctNo) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "SELECT * FROM training.account WHERE account_no = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);

			pstmt.setInt(1, acctNo);

			ResultSet rs = pstmt.executeQuery();

			if (rs.next()) {
				int accountNo = rs.getInt("account_no");
				String accountType = rs.getString("account_type");
				double balance = rs.getDouble("balance");
				int clientId = rs.getInt("client_id");

				Account account = new Account(accountNo, accountType, balance, clientId);

				return account;
			} else {
				return null;
			}
		}
	}

	@Override
	public List<Account> getAllAccountsOfClient(int clientId) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {

			List<Account> accounts = new ArrayList<>();

			String sql = "SELECT * FROM training.account a WHERE a.client_id = ?";

			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, clientId);

			ResultSet rs = pstmt.executeQuery();

			while (rs.next()) {
				int accountNo = rs.getInt("account_no");
				String accountType = rs.getString("account_type");
				double balance = rs.getDouble("balance");
				int client_id = rs.getInt("client_id");

				Account a = new Account(accountNo, accountType, balance, client_id);
				accounts.add(a);
			}
			return accounts;
		}
	}
	
	@Override
	public List<Account> getAllAccountsOfClient(int clientId, double balance1, double balance2) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {

			List<Account> accounts = new ArrayList<>();

			String sql = "SELECT * FROM training.account a WHERE a.client_id = ? AND a.balance >= ? AND a.balance <= ?";

			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, clientId);
			pstmt.setDouble(2,  balance1);
			pstmt.setDouble(3, balance2);

			ResultSet rs = pstmt.executeQuery();

			while (rs.next()) {
				int accountNo = rs.getInt("account_no");
				String accountType = rs.getString("account_type");
				double balance = rs.getDouble("balance");
				int client_id = rs.getInt("client_id");

				Account a = new Account(accountNo, accountType, balance, client_id);
				accounts.add(a);
			}
			return accounts;
		}
	}

	// Create new account for a client with id of X (if client exists)
	@Override
	public Account addAccount(AddOrEditAccountDTO account) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "INSERT INTO training.account (account_type, balance, client_id) VALUES (?, ?, ?)";
			PreparedStatement pstmt = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

			pstmt.setString(1, account.getAccountType());
			pstmt.setDouble(2, account.getBalance());
			pstmt.setInt(3, account.getClientId());

			int recordsUpdated = pstmt.executeUpdate();

			if (recordsUpdated != 1) {
				throw new SQLException("Unable to create an account record");
			}

			ResultSet generatedKeys = pstmt.getGeneratedKeys();
			if (generatedKeys.next()) {
				Account createdAccount = new Account(generatedKeys.getInt(1), account.getAccountType(),
						account.getBalance(), account.getClientId());
				return createdAccount;
			} else {
				throw new SQLException("Autogenerated account number could not be obtained");
			}
		}
	}
	
	

	@Override
	public List<Account> getAccountsOfBalanceRange(int clientId, double balance1, double balance2) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {

			List<Account> accounts = new ArrayList<>();

			String sql = "SELECT * FROM training.account a WHERE a.client_id = ? AND a.balance >= ? AND a.balance <= ?";

			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, clientId);
			pstmt.setDouble(2,  balance1);
			pstmt.setDouble(3, balance2);
			

			ResultSet rs = pstmt.executeQuery();

			while (rs.next()) {
				int accountNo = rs.getInt("account_no");
				String accountType = rs.getString("account_type");
				double balance = rs.getDouble("balance");
				int client_id = rs.getInt("client_id");

				Account a = new Account(accountNo, accountType, balance, client_id);
				accounts.add(a);
			}
			return accounts;
		}
	}

	@Override
	public Account getSpecificAccount(int accountNo) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "SELECT * FROM training.account WHERE account_no = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);

			pstmt.setInt(1, accountNo);
			ResultSet rs = pstmt.executeQuery();

			if (rs.next()) {
				int account_no = rs.getInt("account_no");
				String accountType = rs.getString("account_type");
				double balance = rs.getDouble("balance");
				int client_id = rs.getInt("client_id");

				Account account = new Account(account_no, accountType, balance, client_id);
				return account;
			} else {
				return null;
			}
		}
	}

	@Override
	public Account editAccount(int accountNo, int clientId, AddOrEditAccountDTO account) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "UPDATE training.account SET account_type = ?, balance = ?, client_id = ? WHERE account_no = ? ";
			PreparedStatement pstmt = con.prepareStatement(sql);

			pstmt.setString(1, account.getAccountType());
			pstmt.setDouble(2, account.getBalance());
			pstmt.setInt(3, clientId);
			pstmt.setInt(4, accountNo);

			int recordsUpdated = pstmt.executeUpdate();

			if (recordsUpdated != 1) {
				throw new SQLException("Record was not able to be updated.");
			}
			return new Account(accountNo, account.getAccountType(), account.getBalance(), clientId);
		}
	}

	@Override
	public void deleteAccount(int accountNo, int clientId) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "DELETE FROM training.account WHERE account_no = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);
			
			pstmt.setInt(1, accountNo);
			
			int recordsDeleted = pstmt.executeUpdate();
			if (recordsDeleted != 1) {
				throw new SQLException("Unable to delete record");
			}
		}
	}

}
